
lab_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003fa  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000006e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000514e  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003d11  00000000  00000000  0000589e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006cb  00000000  00000000  000095af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00009c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004700  00000000  00000000  00009d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  0000e410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000e509  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ea ef       	ldi	r30, 0xFA	; 250
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 34 01 	call	0x268	; 0x268 <main>
 234:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:
 23c:	8f 93       	push	r24
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000244 <check32MHzStatus>:
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 248:	81 ff       	sbrs	r24, 1
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>
 24c:	88 ed       	ldi	r24, 0xD8	; 216
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000258 <skip32MHZ_enable>:
 258:	88 ed       	ldi	r24, 0xD8	; 216
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>
 264:	8f 91       	pop	r24
 266:	08 95       	ret

00000268 <main>:
extern void clock_init(void);
extern uint16_t sine_wave[256];
volatile uint16_t sine_wave_address = (&sine_wave);
volatile uint16_t daca_ch0_data_address = (&DACA_CH0DATA);
int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	//set system clock to 32 mhz
	clock_init();
 270:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	//initialize DAC
	dac_init();
 274:	0e 94 46 01 	call	0x28c	; 0x28c <dac_init>
	//initialize timer counter
	tcc0_init();
 278:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <tcc0_init>
	//initialize DMA system
	DMA_CH0_INIT();
 27c:	0e 94 84 01 	call	0x308	; 0x308 <DMA_CH0_INIT>
	//start tcc0 timer
	TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	98 e0       	ldi	r25, 0x08	; 8
 284:	22 e0       	ldi	r18, 0x02	; 2
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
	//dummy loop
	while (1)
	{
		//DO NOTHING
	}
 28a:	ff cf       	rjmp	.-2      	; 0x28a <main+0x22>

0000028c <dac_init>:
}

void dac_init(void)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	//use only channel 0
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	fc 01       	movw	r30, r24
 29a:	11 82       	std	Z+1, r1	; 0x01
	//use arefb
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	28 e1       	ldi	r18, 0x18	; 24
 2a2:	fc 01       	movw	r30, r24
 2a4:	22 83       	std	Z+2, r18	; 0x02
	//enable channel 0
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	25 e0       	ldi	r18, 0x05	; 5
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
}
 2b0:	00 00       	nop
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <tcc0_init>:
void tcc0_init(void)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 d0       	rcall	.+0      	; 0x2be <tcc0_init+0x6>
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
	uint16_t period = 40;
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	9a 83       	std	Y+2, r25	; 0x02
	int8_t offset = 0;
 2ca:	1b 82       	std	Y+3, r1	; 0x03
	//INITIALIZE COUNT REGISTER
	TCC0.CNT = 0;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	98 e0       	ldi	r25, 0x08	; 8
 2d0:	fc 01       	movw	r30, r24
 2d2:	10 a2       	std	Z+32, r1	; 0x20
 2d4:	11 a2       	std	Z+33, r1	; 0x21
	//initialize tcc0 period register
	TCC0.PER = period + offset;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	98 e0       	ldi	r25, 0x08	; 8
 2da:	2b 81       	ldd	r18, Y+3	; 0x03
 2dc:	42 2f       	mov	r20, r18
 2de:	22 0f       	add	r18, r18
 2e0:	55 0b       	sbc	r21, r21
 2e2:	29 81       	ldd	r18, Y+1	; 0x01
 2e4:	3a 81       	ldd	r19, Y+2	; 0x02
 2e6:	24 0f       	add	r18, r20
 2e8:	35 1f       	adc	r19, r21
 2ea:	fc 01       	movw	r30, r24
 2ec:	26 a3       	std	Z+38, r18	; 0x26
 2ee:	37 a3       	std	Z+39, r19	; 0x27
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	20 ec       	ldi	r18, 0xC0	; 192
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
};
 2fa:	00 00       	nop
 2fc:	23 96       	adiw	r28, 0x03	; 3
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	de bf       	out	0x3e, r29	; 62
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <DMA_CH0_INIT>:

void DMA_CH0_INIT(void)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	//set beginning of sinewave table as source address on ch0
	DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine_wave);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e2       	ldi	r19, 0x20	; 32
 318:	fc 01       	movw	r30, r24
 31a:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine_wave)>>8);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e2       	ldi	r19, 0x20	; 32
 324:	23 2f       	mov	r18, r19
 326:	33 27       	eor	r19, r19
 328:	fc 01       	movw	r30, r24
 32a:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)sine_wave)>>16));
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e2       	ldi	r19, 0x20	; 32
 334:	40 e1       	ldi	r20, 0x10	; 16
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DMA_CH0_INIT+0x36>
 33a:	36 95       	lsr	r19
 33c:	27 95       	ror	r18
 33e:	4a 95       	dec	r20
 340:	e2 f7       	brpl	.-8      	; 0x33a <DMA_CH0_INIT+0x32>
 342:	fc 01       	movw	r30, r24
 344:	22 8f       	std	Z+26, r18	; 0x1a
	//set daca ch0 register as destination address
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH0DATA);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	28 e1       	ldi	r18, 0x18	; 24
 34c:	fc 01       	movw	r30, r24
 34e:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH0DATA)>>8);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	23 e0       	ldi	r18, 0x03	; 3
 356:	fc 01       	movw	r30, r24
 358:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH0DATA)>>16));
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	fc 01       	movw	r30, r24
 360:	16 8e       	std	Z+30, r1	; 0x1e
	//set block transfer size on ch0 to 512 bytes
	DMA.CH0.TRFCNT = 512;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	32 e0       	ldi	r19, 0x02	; 2
 36a:	fc 01       	movw	r30, r24
 36c:	24 8b       	std	Z+20, r18	; 0x14
 36e:	35 8b       	std	Z+21, r19	; 0x15
	//set burst size to 2 bytes and turn on repeat mode
	DMA.CH0.CTRLA |= (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	f9 01       	movw	r30, r18
 37a:	20 89       	ldd	r18, Z+16	; 0x10
 37c:	21 62       	ori	r18, 0x21	; 33
 37e:	fc 01       	movw	r30, r24
 380:	20 8b       	std	Z+16, r18	; 0x10
	//enable single shot mode
	DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	31 e0       	ldi	r19, 0x01	; 1
 38a:	f9 01       	movw	r30, r18
 38c:	20 89       	ldd	r18, Z+16	; 0x10
 38e:	24 60       	ori	r18, 0x04	; 4
 390:	fc 01       	movw	r30, r24
 392:	20 8b       	std	Z+16, r18	; 0x10
	//set dma ch0 to reload source address after block transfer and 
	//destination address after burst transfer
	DMA.CH0.ADDRCTRL |= (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	31 e0       	ldi	r19, 0x01	; 1
 39c:	f9 01       	movw	r30, r18
 39e:	22 89       	ldd	r18, Z+18	; 0x12
 3a0:	28 64       	ori	r18, 0x48	; 72
 3a2:	fc 01       	movw	r30, r24
 3a4:	22 8b       	std	Z+18, r18	; 0x12
	//set dma to increment source and destination address after byte transfer
	DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	31 e0       	ldi	r19, 0x01	; 1
 3ae:	f9 01       	movw	r30, r18
 3b0:	22 89       	ldd	r18, Z+18	; 0x12
 3b2:	21 61       	ori	r18, 0x11	; 17
 3b4:	fc 01       	movw	r30, r24
 3b6:	22 8b       	std	Z+18, r18	; 0x12
	//set dma ch0 as event channel 0 user
	DMA.CH0.TRIGSRC |= DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	31 e0       	ldi	r19, 0x01	; 1
 3c0:	f9 01       	movw	r30, r18
 3c2:	23 89       	ldd	r18, Z+19	; 0x13
 3c4:	21 60       	ori	r18, 0x01	; 1
 3c6:	fc 01       	movw	r30, r24
 3c8:	23 8b       	std	Z+19, r18	; 0x13
	//enable dma ch0
	DMA.CTRL |= DMA_ENABLE_bm;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	31 e0       	ldi	r19, 0x01	; 1
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	20 68       	ori	r18, 0x80	; 128
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm; 
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	31 e0       	ldi	r19, 0x01	; 1
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 89       	ldd	r18, Z+16	; 0x10
 3e8:	20 68       	ori	r18, 0x80	; 128
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 8b       	std	Z+16, r18	; 0x10
}
 3ee:	00 00       	nop
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
