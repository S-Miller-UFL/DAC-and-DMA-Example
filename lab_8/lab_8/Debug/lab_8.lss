
lab_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000202  00802000  00000362  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000648  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c2d  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003d02  00000000  00000000  000052dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000680  00000000  00000000  00008fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00009660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003c0c  00000000  00000000  000096d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000d39e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e2 e6       	ldi	r30, 0x62	; 98
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 34 01 	call	0x268	; 0x268 <main>
 234:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, ((0x05<<2) | (0x00<<0)) ;4MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>

	pop r24
 264:	8f 91       	pop	r24

	ret
 266:	08 95       	ret

00000268 <main>:
#define slope (2.5/4095)
extern void clock_init(void);
extern uint16_t sine_wave[256];
volatile uint8_t index = 255;
int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	//set system clock to 32 mhz
	clock_init();
 270:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	//initialize DAC
	dac_init();
 274:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dac_init>
	//initialize timer counter
	tcc0_init();
 278:	0e 94 87 01 	call	0x30e	; 0x30e <tcc0_init>
	//start tcc0 timer
	TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	98 e0       	ldi	r25, 0x08	; 8
 280:	22 e0       	ldi	r18, 0x02	; 2
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
	while (1)
	{
		while(!(DACA.STATUS & DAC_CH0DRE_bm))
 286:	00 00       	nop
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	fc 01       	movw	r30, r24
 28e:	85 81       	ldd	r24, Z+5	; 0x05
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	81 70       	andi	r24, 0x01	; 1
 296:	99 27       	eor	r25, r25
 298:	89 2b       	or	r24, r25
 29a:	b1 f3       	breq	.-20     	; 0x288 <main+0x20>
		{
			//do nothing
		}
		DACA.CH0DATA = sine_wave[index];
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2a4:	22 2f       	mov	r18, r18
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4d       	sbci	r19, 0xDF	; 223
 2b0:	f9 01       	movw	r30, r18
 2b2:	20 81       	ld	r18, Z
 2b4:	31 81       	ldd	r19, Z+1	; 0x01
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 8f       	std	Z+24, r18	; 0x18
 2ba:	31 8f       	std	Z+25, r19	; 0x19
		if(index == 0)
 2bc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2c0:	88 23       	and	r24, r24
 2c2:	21 f4       	brne	.+8      	; 0x2cc <main+0x64>
		{
			index = 255;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 2ca:	dd cf       	rjmp	.-70     	; 0x286 <main+0x1e>
		}
		else
		{
			index = index-1;
 2cc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
		}
		
	}
 2d6:	d7 cf       	rjmp	.-82     	; 0x286 <main+0x1e>

000002d8 <dac_init>:
}

void dac_init(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	//use only channel 0
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc| DAC_CH0TRIG_bm;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	fc 01       	movw	r30, r24
 2e8:	21 83       	std	Z+1, r18	; 0x01
	//use arefb
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	28 e1       	ldi	r18, 0x18	; 24
 2f0:	fc 01       	movw	r30, r24
 2f2:	22 83       	std	Z+2, r18	; 0x02
	//enable channel 0
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	25 e0       	ldi	r18, 0x05	; 5
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
	//enable conversion trigger on channel event 0
	DACA.EVCTRL = DAC_EVSEL_0_gc;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	93 e0       	ldi	r25, 0x03	; 3
 302:	fc 01       	movw	r30, r24
 304:	13 82       	std	Z+3, r1	; 0x03
}
 306:	00 00       	nop
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <tcc0_init>:
void tcc0_init(void)
{
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	00 d0       	rcall	.+0      	; 0x314 <tcc0_init+0x6>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	uint16_t period = 40;
 318:	88 e2       	ldi	r24, 0x28	; 40
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	9a 83       	std	Y+2, r25	; 0x02
	int8_t offset = 0;
 320:	1b 82       	std	Y+3, r1	; 0x03
	//INITIALIZE COUNT REGISTER
	TCC0.CNT = 0;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	98 e0       	ldi	r25, 0x08	; 8
 326:	fc 01       	movw	r30, r24
 328:	10 a2       	std	Z+32, r1	; 0x20
 32a:	11 a2       	std	Z+33, r1	; 0x21
	//initialize tcc0 period register
	TCC0.PER = period + offset;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	98 e0       	ldi	r25, 0x08	; 8
 330:	2b 81       	ldd	r18, Y+3	; 0x03
 332:	42 2f       	mov	r20, r18
 334:	22 0f       	add	r18, r18
 336:	55 0b       	sbc	r21, r21
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	3a 81       	ldd	r19, Y+2	; 0x02
 33c:	24 0f       	add	r18, r20
 33e:	35 1f       	adc	r19, r21
 340:	fc 01       	movw	r30, r24
 342:	26 a3       	std	Z+38, r18	; 0x26
 344:	37 a3       	std	Z+39, r19	; 0x27
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	20 ec       	ldi	r18, 0xC0	; 192
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
};
 350:	00 00       	nop
 352:	23 96       	adiw	r28, 0x03	; 3
 354:	cd bf       	out	0x3d, r28	; 61
 356:	de bf       	out	0x3e, r29	; 62
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
