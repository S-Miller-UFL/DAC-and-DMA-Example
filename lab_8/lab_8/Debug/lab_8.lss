
lab_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000404  00802000  0000096c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802404  00802404  00000e04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056a8  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dba  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3e  00000000  00000000  0000a382  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  0000aec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a32  00000000  00000000  0000aff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  0000fa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000fc80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec e6       	ldi	r30, 0x6C	; 108
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a4 e0       	ldi	r26, 0x04	; 4
 234:	b4 e2       	ldi	r27, 0x24	; 36
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a8 30       	cpi	r26, 0x08	; 8
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 244:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <clock_init>:
 24c:	8f 93       	push	r24
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000254 <check32MHzStatus>:
 254:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 258:	81 ff       	sbrs	r24, 1
 25a:	fc cf       	rjmp	.-8      	; 0x254 <check32MHzStatus>
 25c:	88 ed       	ldi	r24, 0xD8	; 216
 25e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000268 <skip32MHZ_enable>:
 268:	88 ed       	ldi	r24, 0xD8	; 216
 26a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>
 274:	8f 91       	pop	r24
 276:	08 95       	ret

00000278 <main>:
volatile uint8_t switch_frequency_flag = 0;
volatile uint8_t key_pressed =0;
volatile uint8_t note = 0;
/////////////////////
int main(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	1f 92       	push	r1
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	//set system clock to 32 mhz
	clock_init();
 284:	0e 94 26 01 	call	0x24c	; 0x24c <clock_init>
	//initialize DAC
	dac_init();
 288:	0e 94 9d 01 	call	0x33a	; 0x33a <dac_init>
	//initialize power amplifier
	poweramp_init();
 28c:	0e 94 4e 02 	call	0x49c	; 0x49c <poweramp_init>
	//initialize timer counter
	tcc0_init();
 290:	0e 94 b4 01 	call	0x368	; 0x368 <tcc0_init>
	//initialize DMA system
	DMA_CH0_INIT();
 294:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DMA_CH0_INIT>
	//initialize usart
	usartd0_init();
 298:	0e 94 62 02 	call	0x4c4	; 0x4c4 <usartd0_init>
	//enable global interrupts
	PMIC.CTRL = PMIC_MEDLVLEN_bm;
 29c:	80 ea       	ldi	r24, 0xA0	; 160
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	22 e0       	ldi	r18, 0x02	; 2
 2a2:	fc 01       	movw	r30, r24
 2a4:	22 83       	std	Z+2, r18	; 0x02
	sei();
 2a6:	78 94       	sei
	//start tcc0 timer
	//TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
	while (1)
	{
			//check if we need to switch waveforms
			if(switch_wave_flag == 1)
 2a8:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <switch_wave_flag>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	a1 f4       	brne	.+40     	; 0x2d8 <main+0x60>
			{
				switch_wave_flag = 0;
 2b0:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <switch_wave_flag>
				//switch to triangle wave
				if(wave_type == 1)
 2b4:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <main+0x4e>
				{
					switch_waves(1);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 a7 03 	call	0x74e	; 0x74e <switch_waves>
 2c4:	f1 cf       	rjmp	.-30     	; 0x2a8 <main+0x30>
				}
				//switch to sine wave
				else if (wave_type == 0)
 2c6:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 2ca:	88 23       	and	r24, r24
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <main+0x30>
				{
					switch_waves(0);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 a7 03 	call	0x74e	; 0x74e <switch_waves>
 2d6:	e8 cf       	rjmp	.-48     	; 0x2a8 <main+0x30>
				}
			}
			else if(key_pressed)
 2d8:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <key_pressed>
 2dc:	88 23       	and	r24, r24
 2de:	21 f3       	breq	.-56     	; 0x2a8 <main+0x30>
			{
				//if key pressed, turn on timer
				TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	98 e0       	ldi	r25, 0x08	; 8
 2e4:	22 e0       	ldi	r18, 0x02	; 2
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
				TCC0.PER = note;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	98 e0       	ldi	r25, 0x08	; 8
 2ee:	20 91 07 24 	lds	r18, 0x2407	; 0x802407 <note>
 2f2:	22 2f       	mov	r18, r18
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	26 a3       	std	Z+38, r18	; 0x26
 2fa:	37 a3       	std	Z+39, r19	; 0x27
				//keep timer on for certain amount of time
				for(volatile uint16_t i =0;i < 50000; i++)
 2fc:	19 82       	std	Y+1, r1	; 0x01
 2fe:	1a 82       	std	Y+2, r1	; 0x02
 300:	10 c0       	rjmp	.+32     	; 0x322 <main+0xaa>
				{
					while(!(TCC0.INTFLAGS &TC0_OVFIF_bm))
 302:	00 00       	nop
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	98 e0       	ldi	r25, 0x08	; 8
 308:	fc 01       	movw	r30, r24
 30a:	84 85       	ldd	r24, Z+12	; 0x0c
 30c:	88 2f       	mov	r24, r24
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	81 70       	andi	r24, 0x01	; 1
 312:	99 27       	eor	r25, r25
 314:	89 2b       	or	r24, r25
 316:	b1 f3       	breq	.-20     	; 0x304 <main+0x8c>
			{
				//if key pressed, turn on timer
				TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
				TCC0.PER = note;
				//keep timer on for certain amount of time
				for(volatile uint16_t i =0;i < 50000; i++)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	9a 83       	std	Y+2, r25	; 0x02
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	80 35       	cpi	r24, 0x50	; 80
 328:	93 4c       	sbci	r25, 0xC3	; 195
 32a:	58 f3       	brcs	.-42     	; 0x302 <main+0x8a>
					{
						//do nothing
					}
				}
				//turn off timer
				TCC0.CTRLA = 0;
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	98 e0       	ldi	r25, 0x08	; 8
 330:	fc 01       	movw	r30, r24
 332:	10 82       	st	Z, r1
				key_pressed = 0;
 334:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <key_pressed>
			}
			
	}
 338:	b7 cf       	rjmp	.-146    	; 0x2a8 <main+0x30>

0000033a <dac_init>:
}

void dac_init(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	//use only channel 1
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	20 e2       	ldi	r18, 0x20	; 32
 348:	fc 01       	movw	r30, r24
 34a:	21 83       	std	Z+1, r18	; 0x01
	//use arefb
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	28 e1       	ldi	r18, 0x18	; 24
 352:	fc 01       	movw	r30, r24
 354:	22 83       	std	Z+2, r18	; 0x02
	//enable channel 1
	DACA.CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	93 e0       	ldi	r25, 0x03	; 3
 35a:	29 e0       	ldi	r18, 0x09	; 9
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
}
 360:	00 00       	nop
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <tcc0_init>:
void tcc0_init(void)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	00 d0       	rcall	.+0      	; 0x36e <tcc0_init+0x6>
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	uint16_t period = 63;
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	9a 83       	std	Y+2, r25	; 0x02
	int8_t offset = 0;
 37a:	1b 82       	std	Y+3, r1	; 0x03
	//INITIALIZE COUNT REGISTER
	TCC0.CNT = 0;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	98 e0       	ldi	r25, 0x08	; 8
 380:	fc 01       	movw	r30, r24
 382:	10 a2       	std	Z+32, r1	; 0x20
 384:	11 a2       	std	Z+33, r1	; 0x21
	//initialize tcc0 period register
	TCC0.PER = period + offset;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	98 e0       	ldi	r25, 0x08	; 8
 38a:	2b 81       	ldd	r18, Y+3	; 0x03
 38c:	42 2f       	mov	r20, r18
 38e:	22 0f       	add	r18, r18
 390:	55 0b       	sbc	r21, r21
 392:	29 81       	ldd	r18, Y+1	; 0x01
 394:	3a 81       	ldd	r19, Y+2	; 0x02
 396:	24 0f       	add	r18, r20
 398:	35 1f       	adc	r19, r21
 39a:	fc 01       	movw	r30, r24
 39c:	26 a3       	std	Z+38, r18	; 0x26
 39e:	37 a3       	std	Z+39, r19	; 0x27
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	20 ec       	ldi	r18, 0xC0	; 192
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
};
 3aa:	00 00       	nop
 3ac:	23 96       	adiw	r28, 0x03	; 3
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <DMA_CH0_INIT>:

void DMA_CH0_INIT(void)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	//initialize DMA system
	DMA.CTRL = DMA_CH_DISABLE_bm;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18
	DMA.CTRL = DMA_RESET_bm;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	20 e4       	ldi	r18, 0x40	; 64
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
	//set beginning of sinewave table as source address on ch0
	DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine_wave);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	24 e0       	ldi	r18, 0x04	; 4
 3dc:	32 e2       	ldi	r19, 0x22	; 34
 3de:	fc 01       	movw	r30, r24
 3e0:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine_wave)>>8);
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	24 e0       	ldi	r18, 0x04	; 4
 3e8:	32 e2       	ldi	r19, 0x22	; 34
 3ea:	23 2f       	mov	r18, r19
 3ec:	33 27       	eor	r19, r19
 3ee:	fc 01       	movw	r30, r24
 3f0:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)sine_wave)>>16));
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	24 e0       	ldi	r18, 0x04	; 4
 3f8:	32 e2       	ldi	r19, 0x22	; 34
 3fa:	40 e1       	ldi	r20, 0x10	; 16
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	36 95       	lsr	r19
 402:	27 95       	ror	r18
 404:	4a 95       	dec	r20
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	fc 01       	movw	r30, r24
 40a:	22 8f       	std	Z+26, r18	; 0x1a
	//set daca ch1 register as destination address
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	2a e1       	ldi	r18, 0x1A	; 26
 412:	fc 01       	movw	r30, r24
 414:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	23 e0       	ldi	r18, 0x03	; 3
 41c:	fc 01       	movw	r30, r24
 41e:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	fc 01       	movw	r30, r24
 426:	16 8e       	std	Z+30, r1	; 0x1e
	//set block transfer size on ch0 to 512 bytes
	DMA.CH0.TRFCNT = 512;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	32 e0       	ldi	r19, 0x02	; 2
 430:	fc 01       	movw	r30, r24
 432:	24 8b       	std	Z+20, r18	; 0x14
 434:	35 8b       	std	Z+21, r19	; 0x15
	//set burst size to 2 bytes and turn on repeat mode
	DMA.CH0.CTRLA = (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	21 e2       	ldi	r18, 0x21	; 33
 43c:	fc 01       	movw	r30, r24
 43e:	20 8b       	std	Z+16, r18	; 0x10
	//enable single shot mode
	DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	31 e0       	ldi	r19, 0x01	; 1
 448:	f9 01       	movw	r30, r18
 44a:	20 89       	ldd	r18, Z+16	; 0x10
 44c:	24 60       	ori	r18, 0x04	; 4
 44e:	fc 01       	movw	r30, r24
 450:	20 8b       	std	Z+16, r18	; 0x10
	//set dma ch0 to reload source address after block transfer and
	//destination address after burst transfer
	DMA.CH0.ADDRCTRL = (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	28 e4       	ldi	r18, 0x48	; 72
 458:	fc 01       	movw	r30, r24
 45a:	22 8b       	std	Z+18, r18	; 0x12
	//set dma to increment source and destination address after byte transfer
	DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	31 e0       	ldi	r19, 0x01	; 1
 464:	f9 01       	movw	r30, r18
 466:	22 89       	ldd	r18, Z+18	; 0x12
 468:	21 61       	ori	r18, 0x11	; 17
 46a:	fc 01       	movw	r30, r24
 46c:	22 8b       	std	Z+18, r18	; 0x12
	//set dma ch0 as event channel 0 user
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	fc 01       	movw	r30, r24
 476:	23 8b       	std	Z+19, r18	; 0x13
	//enable dma ch0
	DMA.CTRL = DMA_ENABLE_bm;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	20 e8       	ldi	r18, 0x80	; 128
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	31 e0       	ldi	r19, 0x01	; 1
 48a:	f9 01       	movw	r30, r18
 48c:	20 89       	ldd	r18, Z+16	; 0x10
 48e:	20 68       	ori	r18, 0x80	; 128
 490:	fc 01       	movw	r30, r24
 492:	20 8b       	std	Z+16, r18	; 0x10

}
 494:	00 00       	nop
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <poweramp_init>:


void poweramp_init(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	//TURN ON THE POWER AMPLIFIER
	PORTC.OUTSET = poweramp_on;
 4a4:	80 e4       	ldi	r24, 0x40	; 64
 4a6:	96 e0       	ldi	r25, 0x06	; 6
 4a8:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <poweramp_on>
 4ac:	fc 01       	movw	r30, r24
 4ae:	25 83       	std	Z+5, r18	; 0x05
	PORTC.DIRSET = poweramp_on; 
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	96 e0       	ldi	r25, 0x06	; 6
 4b4:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <poweramp_on>
 4b8:	fc 01       	movw	r30, r24
 4ba:	21 83       	std	Z+1, r18	; 0x01
	
}
 4bc:	00 00       	nop
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <usartd0_init>:
void usartd0_init(void)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
	//initialize transmitter and reciever pins
	PORTD.OUTSET = PIN3_bm;
 4cc:	80 e6       	ldi	r24, 0x60	; 96
 4ce:	96 e0       	ldi	r25, 0x06	; 6
 4d0:	28 e0       	ldi	r18, 0x08	; 8
 4d2:	fc 01       	movw	r30, r24
 4d4:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 4d6:	80 e6       	ldi	r24, 0x60	; 96
 4d8:	96 e0       	ldi	r25, 0x06	; 6
 4da:	28 e0       	ldi	r18, 0x08	; 8
 4dc:	fc 01       	movw	r30, r24
 4de:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 4e0:	80 e6       	ldi	r24, 0x60	; 96
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	24 e0       	ldi	r18, 0x04	; 4
 4e6:	fc 01       	movw	r30, r24
 4e8:	22 83       	std	Z+2, r18	; 0x02

	//set baud rate
	USARTD0.BAUDCTRLA = (uint8_t)bsel;
 4ea:	80 ea       	ldi	r24, 0xA0	; 160
 4ec:	99 e0       	ldi	r25, 0x09	; 9
 4ee:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <bsel>
 4f2:	fc 01       	movw	r30, r24
 4f4:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((bscale << 4)|(bsel >> 8));
 4f6:	80 ea       	ldi	r24, 0xA0	; 160
 4f8:	99 e0       	ldi	r25, 0x09	; 9
 4fa:	20 91 02 22 	lds	r18, 0x2202	; 0x802202 <bscale>
 4fe:	02 2e       	mov	r0, r18
 500:	00 0c       	add	r0, r0
 502:	33 0b       	sbc	r19, r19
 504:	22 95       	swap	r18
 506:	32 95       	swap	r19
 508:	30 7f       	andi	r19, 0xF0	; 240
 50a:	32 27       	eor	r19, r18
 50c:	20 7f       	andi	r18, 0xF0	; 240
 50e:	32 27       	eor	r19, r18
 510:	42 2f       	mov	r20, r18
 512:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <bsel>
 516:	02 2e       	mov	r0, r18
 518:	00 0c       	add	r0, r0
 51a:	33 0b       	sbc	r19, r19
 51c:	23 2f       	mov	r18, r19
 51e:	33 0f       	add	r19, r19
 520:	33 0b       	sbc	r19, r19
 522:	24 2b       	or	r18, r20
 524:	fc 01       	movw	r30, r24
 526:	27 83       	std	Z+7, r18	; 0x07

	//set to 8 bit odd parity with 1 stop bit
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_ODD_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 528:	80 ea       	ldi	r24, 0xA0	; 160
 52a:	99 e0       	ldi	r25, 0x09	; 9
 52c:	23 e3       	ldi	r18, 0x33	; 51
 52e:	fc 01       	movw	r30, r24
 530:	25 83       	std	Z+5, r18	; 0x05

	//ENABLE TRANSMITTER AND RECIEVER
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 532:	80 ea       	ldi	r24, 0xA0	; 160
 534:	99 e0       	ldi	r25, 0x09	; 9
 536:	28 e1       	ldi	r18, 0x18	; 24
 538:	fc 01       	movw	r30, r24
 53a:	24 83       	std	Z+4, r18	; 0x04
	
	//enable interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
 53c:	80 ea       	ldi	r24, 0xA0	; 160
 53e:	99 e0       	ldi	r25, 0x09	; 9
 540:	20 e2       	ldi	r18, 0x20	; 32
 542:	fc 01       	movw	r30, r24
 544:	23 83       	std	Z+3, r18	; 0x03
}
 546:	00 00       	nop
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <__vector_88>:
ISR(USARTD0_RXC_vect)
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 55e:	0f 92       	push	r0
 560:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 564:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 568:	0f 92       	push	r0
 56a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 56e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 572:	0f 92       	push	r0
 574:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	1f 92       	push	r1
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
	char data;
	data = USARTD0.DATA;
 58a:	80 ea       	ldi	r24, 0xA0	; 160
 58c:	99 e0       	ldi	r25, 0x09	; 9
 58e:	fc 01       	movw	r30, r24
 590:	80 81       	ld	r24, Z
 592:	89 83       	std	Y+1, r24	; 0x01
	if(data == 's' || data == 'S')
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	83 37       	cpi	r24, 0x73	; 115
 598:	19 f0       	breq	.+6      	; 0x5a0 <__vector_88+0x52>
 59a:	89 81       	ldd	r24, Y+1	; 0x01
 59c:	83 35       	cpi	r24, 0x53	; 83
 59e:	b1 f4       	brne	.+44     	; 0x5cc <__vector_88+0x7e>
	{
		if(wave_type == 1)
 5a0:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	31 f4       	brne	.+12     	; 0x5b4 <__vector_88+0x66>
		{
			//SWITCH TO SINE WAVE
			wave_type = 0;
 5a8:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <__data_end>
			switch_wave_flag = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 05 24 	sts	0x2405, r24	; 0x802405 <switch_wave_flag>
{
	char data;
	data = USARTD0.DATA;
	if(data == 's' || data == 'S')
	{
		if(wave_type == 1)
 5b2:	b5 c0       	rjmp	.+362    	; 0x71e <__vector_88+0x1d0>
		{
			//SWITCH TO SINE WAVE
			wave_type = 0;
			switch_wave_flag = 1;
		}
		else if(wave_type == 0)
 5b4:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 5b8:	88 23       	and	r24, r24
 5ba:	09 f0       	breq	.+2      	; 0x5be <__vector_88+0x70>
 5bc:	b0 c0       	rjmp	.+352    	; 0x71e <__vector_88+0x1d0>
		{
			//SWITCH TO	TRIANGLE WAVE
			wave_type = 1;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <__data_end>
			switch_wave_flag = 1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 05 24 	sts	0x2405, r24	; 0x802405 <switch_wave_flag>
{
	char data;
	data = USARTD0.DATA;
	if(data == 's' || data == 'S')
	{
		if(wave_type == 1)
 5ca:	a9 c0       	rjmp	.+338    	; 0x71e <__vector_88+0x1d0>
	P = 30
	
*/
	else
	{
		if(data == 'e' || data == 'E')
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	85 36       	cpi	r24, 0x65	; 101
 5d0:	19 f0       	breq	.+6      	; 0x5d8 <__vector_88+0x8a>
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	85 34       	cpi	r24, 0x45	; 69
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__vector_88+0x98>
		{
			key_pressed = 1;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 61;
 5de:	8d e3       	ldi	r24, 0x3D	; 61
 5e0:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 5e4:	9d c0       	rjmp	.+314    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == '4' || data == '4')
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	84 33       	cpi	r24, 0x34	; 52
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <__vector_88+0xa4>
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	84 33       	cpi	r24, 0x34	; 52
 5f0:	39 f4       	brne	.+14     	; 0x600 <__vector_88+0xb2>
		{
			key_pressed = 1;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 57;
 5f8:	89 e3       	ldi	r24, 0x39	; 57
 5fa:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 5fe:	90 c0       	rjmp	.+288    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'r' || data == 'R')
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	82 37       	cpi	r24, 0x72	; 114
 604:	19 f0       	breq	.+6      	; 0x60c <__vector_88+0xbe>
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	82 35       	cpi	r24, 0x52	; 82
 60a:	39 f4       	brne	.+14     	; 0x61a <__vector_88+0xcc>
		{
			key_pressed = 1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 54;
 612:	86 e3       	ldi	r24, 0x36	; 54
 614:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 618:	83 c0       	rjmp	.+262    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == '5' || data == '5')
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	85 33       	cpi	r24, 0x35	; 53
 61e:	19 f0       	breq	.+6      	; 0x626 <__vector_88+0xd8>
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	85 33       	cpi	r24, 0x35	; 53
 624:	39 f4       	brne	.+14     	; 0x634 <__vector_88+0xe6>
		{
			key_pressed = 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 51;
 62c:	83 e3       	ldi	r24, 0x33	; 51
 62e:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 632:	76 c0       	rjmp	.+236    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 't' || data == 'T')
 634:	89 81       	ldd	r24, Y+1	; 0x01
 636:	84 37       	cpi	r24, 0x74	; 116
 638:	19 f0       	breq	.+6      	; 0x640 <__vector_88+0xf2>
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	84 35       	cpi	r24, 0x54	; 84
 63e:	39 f4       	brne	.+14     	; 0x64e <__vector_88+0x100>
		{
			key_pressed = 1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 48;
 646:	80 e3       	ldi	r24, 0x30	; 48
 648:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 64c:	69 c0       	rjmp	.+210    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'y' || data == 'Y')
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	89 37       	cpi	r24, 0x79	; 121
 652:	19 f0       	breq	.+6      	; 0x65a <__vector_88+0x10c>
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	89 35       	cpi	r24, 0x59	; 89
 658:	39 f4       	brne	.+14     	; 0x668 <__vector_88+0x11a>
		{
			key_pressed = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 45;
 660:	8d e2       	ldi	r24, 0x2D	; 45
 662:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 666:	5c c0       	rjmp	.+184    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == '7' || data == '7')
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	87 33       	cpi	r24, 0x37	; 55
 66c:	19 f0       	breq	.+6      	; 0x674 <__vector_88+0x126>
 66e:	89 81       	ldd	r24, Y+1	; 0x01
 670:	87 33       	cpi	r24, 0x37	; 55
 672:	39 f4       	brne	.+14     	; 0x682 <__vector_88+0x134>
		{
			key_pressed = 1;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 43;
 67a:	8b e2       	ldi	r24, 0x2B	; 43
 67c:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 680:	4f c0       	rjmp	.+158    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'u' || data == 'U')
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	85 37       	cpi	r24, 0x75	; 117
 686:	19 f0       	breq	.+6      	; 0x68e <__vector_88+0x140>
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	85 35       	cpi	r24, 0x55	; 85
 68c:	39 f4       	brne	.+14     	; 0x69c <__vector_88+0x14e>
		{
			key_pressed = 1;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 40;
 694:	88 e2       	ldi	r24, 0x28	; 40
 696:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 69a:	42 c0       	rjmp	.+132    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == '8' || data == '8')
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	88 33       	cpi	r24, 0x38	; 56
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <__vector_88+0x15a>
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	88 33       	cpi	r24, 0x38	; 56
 6a6:	39 f4       	brne	.+14     	; 0x6b6 <__vector_88+0x168>
		{
			key_pressed = 1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 38;
 6ae:	86 e2       	ldi	r24, 0x26	; 38
 6b0:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 6b4:	35 c0       	rjmp	.+106    	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'i' || data == 'I')
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	89 36       	cpi	r24, 0x69	; 105
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <__vector_88+0x174>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	89 34       	cpi	r24, 0x49	; 73
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <__vector_88+0x182>
		{
			key_pressed = 1;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 36;
 6c8:	84 e2       	ldi	r24, 0x24	; 36
 6ca:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 6ce:	28 c0       	rjmp	.+80     	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == '9' || data == '9')
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	89 33       	cpi	r24, 0x39	; 57
 6d4:	19 f0       	breq	.+6      	; 0x6dc <__vector_88+0x18e>
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	89 33       	cpi	r24, 0x39	; 57
 6da:	39 f4       	brne	.+14     	; 0x6ea <__vector_88+0x19c>
		{
			key_pressed = 1;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 34;
 6e2:	82 e2       	ldi	r24, 0x22	; 34
 6e4:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 6e8:	1b c0       	rjmp	.+54     	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'o' || data == 'O')
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	8f 36       	cpi	r24, 0x6F	; 111
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <__vector_88+0x1a8>
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	8f 34       	cpi	r24, 0x4F	; 79
 6f4:	39 f4       	brne	.+14     	; 0x704 <__vector_88+0x1b6>
		{
			key_pressed = 1;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 32;
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
 702:	0e c0       	rjmp	.+28     	; 0x720 <__vector_88+0x1d2>
		}
		else if(data == 'p' || data == 'P')
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	80 37       	cpi	r24, 0x70	; 112
 708:	19 f0       	breq	.+6      	; 0x710 <__vector_88+0x1c2>
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	80 35       	cpi	r24, 0x50	; 80
 70e:	41 f4       	brne	.+16     	; 0x720 <__vector_88+0x1d2>
		{
			key_pressed = 1;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 06 24 	sts	0x2406, r24	; 0x802406 <key_pressed>
			note = 30;
 716:	8e e1       	ldi	r24, 0x1E	; 30
 718:	80 93 07 24 	sts	0x2407, r24	; 0x802407 <note>
		
		
		
	}
	
}
 71c:	01 c0       	rjmp	.+2      	; 0x720 <__vector_88+0x1d2>
{
	char data;
	data = USARTD0.DATA;
	if(data == 's' || data == 'S')
	{
		if(wave_type == 1)
 71e:	00 00       	nop
		
		
		
	}
	
}
 720:	00 00       	nop
 722:	0f 90       	pop	r0
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	ff 91       	pop	r31
 72a:	ef 91       	pop	r30
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	0f 90       	pop	r0
 732:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 736:	0f 90       	pop	r0
 738:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 73c:	0f 90       	pop	r0
 73e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 742:	0f 90       	pop	r0
 744:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <switch_waves>:

void switch_waves(uint8_t flag)
{
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	1f 92       	push	r1
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	89 83       	std	Y+1, r24	; 0x01
	//switch to sine
	if(flag == 0)
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	88 23       	and	r24, r24
 75e:	09 f0       	breq	.+2      	; 0x762 <switch_waves+0x14>
 760:	7d c0       	rjmp	.+250    	; 0x85c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		//initialize DMA system
		DMA.CTRL = DMA_CH_DISABLE_bm;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 76a:	fc 01       	movw	r30, r24
 76c:	20 83       	st	Z, r18
		DMA.CTRL = DMA_RESET_bm;
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	20 e4       	ldi	r18, 0x40	; 64
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
		//set beginning of sinewave table as source address on ch0
		DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine_wave);
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	24 e0       	ldi	r18, 0x04	; 4
 77e:	32 e2       	ldi	r19, 0x22	; 34
 780:	fc 01       	movw	r30, r24
 782:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine_wave)>>8);
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	24 e0       	ldi	r18, 0x04	; 4
 78a:	32 e2       	ldi	r19, 0x22	; 34
 78c:	23 2f       	mov	r18, r19
 78e:	33 27       	eor	r19, r19
 790:	fc 01       	movw	r30, r24
 792:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)sine_wave)>>16));
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	24 e0       	ldi	r18, 0x04	; 4
 79a:	32 e2       	ldi	r19, 0x22	; 34
 79c:	40 e1       	ldi	r20, 0x10	; 16
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <switch_waves+0x58>
 7a2:	36 95       	lsr	r19
 7a4:	27 95       	ror	r18
 7a6:	4a 95       	dec	r20
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <switch_waves+0x54>
 7aa:	fc 01       	movw	r30, r24
 7ac:	22 8f       	std	Z+26, r18	; 0x1a
		//set daca ch1 register as destination address
		DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	2a e1       	ldi	r18, 0x1A	; 26
 7b4:	fc 01       	movw	r30, r24
 7b6:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	23 e0       	ldi	r18, 0x03	; 3
 7be:	fc 01       	movw	r30, r24
 7c0:	25 8f       	std	Z+29, r18	; 0x1d
		DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	fc 01       	movw	r30, r24
 7c8:	16 8e       	std	Z+30, r1	; 0x1e
		//set block transfer size on ch0 to 512 bytes
		DMA.CH0.TRFCNT = 512;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	32 e0       	ldi	r19, 0x02	; 2
 7d2:	fc 01       	movw	r30, r24
 7d4:	24 8b       	std	Z+20, r18	; 0x14
 7d6:	35 8b       	std	Z+21, r19	; 0x15
		//set burst size to 2 bytes and turn on repeat mode
		DMA.CH0.CTRLA |= (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm);
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	31 e0       	ldi	r19, 0x01	; 1
 7e0:	f9 01       	movw	r30, r18
 7e2:	20 89       	ldd	r18, Z+16	; 0x10
 7e4:	21 62       	ori	r18, 0x21	; 33
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 8b       	std	Z+16, r18	; 0x10
		//enable single shot mode
		DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	31 e0       	ldi	r19, 0x01	; 1
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 89       	ldd	r18, Z+16	; 0x10
 7f6:	24 60       	ori	r18, 0x04	; 4
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 8b       	std	Z+16, r18	; 0x10
		//set dma ch0 to reload source address after block transfer and
		//destination address after burst transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	31 e0       	ldi	r19, 0x01	; 1
 804:	f9 01       	movw	r30, r18
 806:	22 89       	ldd	r18, Z+18	; 0x12
 808:	28 64       	ori	r18, 0x48	; 72
 80a:	fc 01       	movw	r30, r24
 80c:	22 8b       	std	Z+18, r18	; 0x12
		//set dma to increment source and destination address after byte transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	31 e0       	ldi	r19, 0x01	; 1
 816:	f9 01       	movw	r30, r18
 818:	22 89       	ldd	r18, Z+18	; 0x12
 81a:	21 61       	ori	r18, 0x11	; 17
 81c:	fc 01       	movw	r30, r24
 81e:	22 8b       	std	Z+18, r18	; 0x12
		//set dma ch0 as event channel 0 user
		DMA.CH0.TRIGSRC |= DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	20 e0       	ldi	r18, 0x00	; 0
 826:	31 e0       	ldi	r19, 0x01	; 1
 828:	f9 01       	movw	r30, r18
 82a:	23 89       	ldd	r18, Z+19	; 0x13
 82c:	21 60       	ori	r18, 0x01	; 1
 82e:	fc 01       	movw	r30, r24
 830:	23 8b       	std	Z+19, r18	; 0x13
		//enable dma ch0
		DMA.CTRL |= DMA_ENABLE_bm;
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	31 e0       	ldi	r19, 0x01	; 1
 83a:	f9 01       	movw	r30, r18
 83c:	20 81       	ld	r18, Z
 83e:	20 68       	ori	r18, 0x80	; 128
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	91 e0       	ldi	r25, 0x01	; 1
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	31 e0       	ldi	r19, 0x01	; 1
 84c:	f9 01       	movw	r30, r18
 84e:	20 89       	ldd	r18, Z+16	; 0x10
 850:	20 68       	ori	r18, 0x80	; 128
 852:	fc 01       	movw	r30, r24
 854:	20 8b       	std	Z+16, r18	; 0x10
		wave_type = 0;
 856:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <__data_end>
		DMA.CTRL |= DMA_ENABLE_bm;
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
		wave_type =1;
	} 
	
 85a:	81 c0       	rjmp	.+258    	; 0x95e <__EEPROM_REGION_LENGTH__+0x15e>
		DMA.CTRL |= DMA_ENABLE_bm;
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
		wave_type = 0;
	}
	//switch to triangle
	else if(flag ==1)
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	09 f0       	breq	.+2      	; 0x864 <__EEPROM_REGION_LENGTH__+0x64>
 862:	7d c0       	rjmp	.+250    	; 0x95e <__EEPROM_REGION_LENGTH__+0x15e>
	{
		//initialize DMA system
		DMA.CTRL = DMA_CH_DISABLE_bm;
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 86c:	fc 01       	movw	r30, r24
 86e:	20 83       	st	Z, r18
		DMA.CTRL = DMA_RESET_bm;
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	20 e4       	ldi	r18, 0x40	; 64
 876:	fc 01       	movw	r30, r24
 878:	20 83       	st	Z, r18
		//set beginning of triangle wave table as source address on ch0
		DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)triangle_wave);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	30 e2       	ldi	r19, 0x20	; 32
 882:	fc 01       	movw	r30, r24
 884:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)triangle_wave)>>8);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	20 e0       	ldi	r18, 0x00	; 0
 88c:	30 e2       	ldi	r19, 0x20	; 32
 88e:	23 2f       	mov	r18, r19
 890:	33 27       	eor	r19, r19
 892:	fc 01       	movw	r30, r24
 894:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)triangle_wave)>>16));
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	30 e2       	ldi	r19, 0x20	; 32
 89e:	40 e1       	ldi	r20, 0x10	; 16
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
 8a4:	36 95       	lsr	r19
 8a6:	27 95       	ror	r18
 8a8:	4a 95       	dec	r20
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 8ac:	fc 01       	movw	r30, r24
 8ae:	22 8f       	std	Z+26, r18	; 0x1a
		//set daca ch1 register as destination address
		DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	2a e1       	ldi	r18, 0x1A	; 26
 8b6:	fc 01       	movw	r30, r24
 8b8:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	23 e0       	ldi	r18, 0x03	; 3
 8c0:	fc 01       	movw	r30, r24
 8c2:	25 8f       	std	Z+29, r18	; 0x1d
		DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	fc 01       	movw	r30, r24
 8ca:	16 8e       	std	Z+30, r1	; 0x1e
		//set block transfer size on ch0 to 512 bytes
		DMA.CH0.TRFCNT = 512;
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	32 e0       	ldi	r19, 0x02	; 2
 8d4:	fc 01       	movw	r30, r24
 8d6:	24 8b       	std	Z+20, r18	; 0x14
 8d8:	35 8b       	std	Z+21, r19	; 0x15
		//set burst size to 2 bytes and turn on repeat mode
		DMA.CH0.CTRLA |= (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm);
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	20 e0       	ldi	r18, 0x00	; 0
 8e0:	31 e0       	ldi	r19, 0x01	; 1
 8e2:	f9 01       	movw	r30, r18
 8e4:	20 89       	ldd	r18, Z+16	; 0x10
 8e6:	21 62       	ori	r18, 0x21	; 33
 8e8:	fc 01       	movw	r30, r24
 8ea:	20 8b       	std	Z+16, r18	; 0x10
		//enable single shot mode
		DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	91 e0       	ldi	r25, 0x01	; 1
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	31 e0       	ldi	r19, 0x01	; 1
 8f4:	f9 01       	movw	r30, r18
 8f6:	20 89       	ldd	r18, Z+16	; 0x10
 8f8:	24 60       	ori	r18, 0x04	; 4
 8fa:	fc 01       	movw	r30, r24
 8fc:	20 8b       	std	Z+16, r18	; 0x10
		//set dma ch0 to reload source address after block transfer and
		//destination address after burst transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	20 e0       	ldi	r18, 0x00	; 0
 904:	31 e0       	ldi	r19, 0x01	; 1
 906:	f9 01       	movw	r30, r18
 908:	22 89       	ldd	r18, Z+18	; 0x12
 90a:	28 64       	ori	r18, 0x48	; 72
 90c:	fc 01       	movw	r30, r24
 90e:	22 8b       	std	Z+18, r18	; 0x12
		//set dma to increment source and destination address after byte transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	91 e0       	ldi	r25, 0x01	; 1
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	31 e0       	ldi	r19, 0x01	; 1
 918:	f9 01       	movw	r30, r18
 91a:	22 89       	ldd	r18, Z+18	; 0x12
 91c:	21 61       	ori	r18, 0x11	; 17
 91e:	fc 01       	movw	r30, r24
 920:	22 8b       	std	Z+18, r18	; 0x12
		//set dma ch0 as event channel 0 user
		DMA.CH0.TRIGSRC |= DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	20 e0       	ldi	r18, 0x00	; 0
 928:	31 e0       	ldi	r19, 0x01	; 1
 92a:	f9 01       	movw	r30, r18
 92c:	23 89       	ldd	r18, Z+19	; 0x13
 92e:	21 60       	ori	r18, 0x01	; 1
 930:	fc 01       	movw	r30, r24
 932:	23 8b       	std	Z+19, r18	; 0x13
		//enable dma ch0
		DMA.CTRL |= DMA_ENABLE_bm;
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	31 e0       	ldi	r19, 0x01	; 1
 93c:	f9 01       	movw	r30, r18
 93e:	20 81       	ld	r18, Z
 940:	20 68       	ori	r18, 0x80	; 128
 942:	fc 01       	movw	r30, r24
 944:	20 83       	st	Z, r18
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	31 e0       	ldi	r19, 0x01	; 1
 94e:	f9 01       	movw	r30, r18
 950:	20 89       	ldd	r18, Z+16	; 0x10
 952:	20 68       	ori	r18, 0x80	; 128
 954:	fc 01       	movw	r30, r24
 956:	20 8b       	std	Z+16, r18	; 0x10
		wave_type =1;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <__data_end>
	} 
	
 95e:	00 00       	nop
 960:	0f 90       	pop	r0
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
