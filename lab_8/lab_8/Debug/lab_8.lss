
lab_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000404  00802000  0000077e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00802404  00802404  00000c16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005668  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d91  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000964  00000000  00000000  0000a129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  0000aa90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a61  00000000  00000000  0000abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  0000f629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000f883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e7       	ldi	r30, 0x7E	; 126
 21c:	f7 e0       	ldi	r31, 0x07	; 7
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a4 e0       	ldi	r26, 0x04	; 4
 234:	b4 e2       	ldi	r27, 0x24	; 36
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a7 30       	cpi	r26, 0x07	; 7
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 244:	0c 94 bd 03 	jmp	0x77a	; 0x77a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 24c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 24e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 250:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000254 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 254:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 258:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 25a:	fc cf       	rjmp	.-8      	; 0x254 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 25c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 25e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 262:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000268 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 268:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 26a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 26e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, ((0x05<<2) | (0x00<<0)) ;4MHz

	sts CLK_PSCTRL, r24
 270:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>

	pop r24
 274:	8f 91       	pop	r24

	ret
 276:	08 95       	ret

00000278 <main>:
volatile uint8_t DMA_CH_DISABLE_bm = (0x1<<7);
volatile uint8_t switch_wave_flag = 0;
volatile uint8_t switch_frequency_flag = 0;
/////////////////////
int main(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	//set system clock to 32 mhz
	clock_init();
 280:	0e 94 26 01 	call	0x24c	; 0x24c <clock_init>
	//initialize DAC
	dac_init();
 284:	0e 94 76 01 	call	0x2ec	; 0x2ec <dac_init>
	//initialize power amplifier
	poweramp_init();
 288:	0e 94 27 02 	call	0x44e	; 0x44e <poweramp_init>
	//initialize timer counter
	tcc0_init();
 28c:	0e 94 8d 01 	call	0x31a	; 0x31a <tcc0_init>
	//initialize DMA system
	DMA_CH0_INIT();
 290:	0e 94 b5 01 	call	0x36a	; 0x36a <DMA_CH0_INIT>
	//DMA_CH1_INIT();
	//initialize usart
	usartd0_init();
 294:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_init>
	//enable global interrupts
	PMIC.CTRL = PMIC_MEDLVLEN_bm;
 298:	80 ea       	ldi	r24, 0xA0	; 160
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 e0       	ldi	r18, 0x02	; 2
 29e:	fc 01       	movw	r30, r24
 2a0:	22 83       	std	Z+2, r18	; 0x02
	sei();
 2a2:	78 94       	sei
	//start tcc0 timer
	TCC0.CTRLA = TC_CLKSEL_DIV2_gc;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	98 e0       	ldi	r25, 0x08	; 8
 2a8:	22 e0       	ldi	r18, 0x02	; 2
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
	//dummy loop
	while (1)
	{
		//check if we need to switch waveforms
		if(switch_wave_flag == 1)
 2ae:	80 91 05 24 	lds	r24, 0x2405	; 0x802405 <switch_wave_flag>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	a1 f4       	brne	.+40     	; 0x2de <main+0x66>
		{
			switch_wave_flag = 0;
 2b6:	10 92 05 24 	sts	0x2405, r1	; 0x802405 <switch_wave_flag>
			//switch to triangle wave
			if(wave_type == 1)
 2ba:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	29 f4       	brne	.+10     	; 0x2cc <main+0x54>
			{
				switch_waves(1);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 de 02 	call	0x5bc	; 0x5bc <switch_waves>
 2ca:	f1 cf       	rjmp	.-30     	; 0x2ae <main+0x36>
			}
			//switch to sine wave
			else if (wave_type == 0)
 2cc:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 2d0:	88 23       	and	r24, r24
 2d2:	69 f7       	brne	.-38     	; 0x2ae <main+0x36>
			{
				switch_waves(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <switch_waves>
 2dc:	e8 cf       	rjmp	.-48     	; 0x2ae <main+0x36>
			}
		}
		//check if we need to switch frequencies
		else if (switch_frequency_flag)
 2de:	80 91 06 24 	lds	r24, 0x2406	; 0x802406 <switch_frequency_flag>
 2e2:	88 23       	and	r24, r24
 2e4:	21 f3       	breq	.-56     	; 0x2ae <main+0x36>
		{
			switch_frequency_flag = 0;
 2e6:	10 92 06 24 	sts	0x2406, r1	; 0x802406 <switch_frequency_flag>
		}
	}
 2ea:	e1 cf       	rjmp	.-62     	; 0x2ae <main+0x36>

000002ec <dac_init>:
}

void dac_init(void)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	//use only channel 1
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	20 e2       	ldi	r18, 0x20	; 32
 2fa:	fc 01       	movw	r30, r24
 2fc:	21 83       	std	Z+1, r18	; 0x01
	//use arefb
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	93 e0       	ldi	r25, 0x03	; 3
 302:	28 e1       	ldi	r18, 0x18	; 24
 304:	fc 01       	movw	r30, r24
 306:	22 83       	std	Z+2, r18	; 0x02
	//enable channel 1
	DACA.CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	93 e0       	ldi	r25, 0x03	; 3
 30c:	29 e0       	ldi	r18, 0x09	; 9
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
}
 312:	00 00       	nop
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <tcc0_init>:
void tcc0_init(void)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <tcc0_init+0x6>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	uint16_t period = 63;
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	9a 83       	std	Y+2, r25	; 0x02
	int8_t offset = 0;
 32c:	1b 82       	std	Y+3, r1	; 0x03
	//INITIALIZE COUNT REGISTER
	TCC0.CNT = 0;
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	98 e0       	ldi	r25, 0x08	; 8
 332:	fc 01       	movw	r30, r24
 334:	10 a2       	std	Z+32, r1	; 0x20
 336:	11 a2       	std	Z+33, r1	; 0x21
	//initialize tcc0 period register
	TCC0.PER = period + offset;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	98 e0       	ldi	r25, 0x08	; 8
 33c:	2b 81       	ldd	r18, Y+3	; 0x03
 33e:	42 2f       	mov	r20, r18
 340:	22 0f       	add	r18, r18
 342:	55 0b       	sbc	r21, r21
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	3a 81       	ldd	r19, Y+2	; 0x02
 348:	24 0f       	add	r18, r20
 34a:	35 1f       	adc	r19, r21
 34c:	fc 01       	movw	r30, r24
 34e:	26 a3       	std	Z+38, r18	; 0x26
 350:	37 a3       	std	Z+39, r19	; 0x27
	//set tcc0 as event channel 0 source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 352:	80 e8       	ldi	r24, 0x80	; 128
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	20 ec       	ldi	r18, 0xC0	; 192
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
};
 35c:	00 00       	nop
 35e:	23 96       	adiw	r28, 0x03	; 3
 360:	cd bf       	out	0x3d, r28	; 61
 362:	de bf       	out	0x3e, r29	; 62
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <DMA_CH0_INIT>:

void DMA_CH0_INIT(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	//initialize DMA system
	DMA.CTRL = DMA_CH_DISABLE_bm;
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
	DMA.CTRL = DMA_RESET_bm;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	20 e4       	ldi	r18, 0x40	; 64
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
	//set beginning of sinewave table as source address on ch0
	DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine_wave);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	24 e0       	ldi	r18, 0x04	; 4
 38e:	32 e2       	ldi	r19, 0x22	; 34
 390:	fc 01       	movw	r30, r24
 392:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine_wave)>>8);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	24 e0       	ldi	r18, 0x04	; 4
 39a:	32 e2       	ldi	r19, 0x22	; 34
 39c:	23 2f       	mov	r18, r19
 39e:	33 27       	eor	r19, r19
 3a0:	fc 01       	movw	r30, r24
 3a2:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)sine_wave)>>16));
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	24 e0       	ldi	r18, 0x04	; 4
 3aa:	32 e2       	ldi	r19, 0x22	; 34
 3ac:	40 e1       	ldi	r20, 0x10	; 16
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DMA_CH0_INIT+0x4c>
 3b2:	36 95       	lsr	r19
 3b4:	27 95       	ror	r18
 3b6:	4a 95       	dec	r20
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DMA_CH0_INIT+0x48>
 3ba:	fc 01       	movw	r30, r24
 3bc:	22 8f       	std	Z+26, r18	; 0x1a
	//set daca ch1 register as destination address
	DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	2a e1       	ldi	r18, 0x1A	; 26
 3c4:	fc 01       	movw	r30, r24
 3c6:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	23 e0       	ldi	r18, 0x03	; 3
 3ce:	fc 01       	movw	r30, r24
 3d0:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	fc 01       	movw	r30, r24
 3d8:	16 8e       	std	Z+30, r1	; 0x1e
	//set block transfer size on ch0 to 512 bytes
	DMA.CH0.TRFCNT = 512;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	32 e0       	ldi	r19, 0x02	; 2
 3e2:	fc 01       	movw	r30, r24
 3e4:	24 8b       	std	Z+20, r18	; 0x14
 3e6:	35 8b       	std	Z+21, r19	; 0x15
	//set burst size to 2 bytes and turn on repeat mode
	DMA.CH0.CTRLA = (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	21 e2       	ldi	r18, 0x21	; 33
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 8b       	std	Z+16, r18	; 0x10
	//enable single shot mode
	DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	31 e0       	ldi	r19, 0x01	; 1
 3fa:	f9 01       	movw	r30, r18
 3fc:	20 89       	ldd	r18, Z+16	; 0x10
 3fe:	24 60       	ori	r18, 0x04	; 4
 400:	fc 01       	movw	r30, r24
 402:	20 8b       	std	Z+16, r18	; 0x10
	//set dma ch0 to reload source address after block transfer and
	//destination address after burst transfer
	DMA.CH0.ADDRCTRL = (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	28 e4       	ldi	r18, 0x48	; 72
 40a:	fc 01       	movw	r30, r24
 40c:	22 8b       	std	Z+18, r18	; 0x12
	//set dma to increment source and destination address after byte transfer
	DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	31 e0       	ldi	r19, 0x01	; 1
 416:	f9 01       	movw	r30, r18
 418:	22 89       	ldd	r18, Z+18	; 0x12
 41a:	21 61       	ori	r18, 0x11	; 17
 41c:	fc 01       	movw	r30, r24
 41e:	22 8b       	std	Z+18, r18	; 0x12
	//set dma ch0 as event channel 0 user
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	fc 01       	movw	r30, r24
 428:	23 8b       	std	Z+19, r18	; 0x13
	//enable dma ch0
	DMA.CTRL = DMA_ENABLE_bm;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	20 e8       	ldi	r18, 0x80	; 128
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	31 e0       	ldi	r19, 0x01	; 1
 43c:	f9 01       	movw	r30, r18
 43e:	20 89       	ldd	r18, Z+16	; 0x10
 440:	20 68       	ori	r18, 0x80	; 128
 442:	fc 01       	movw	r30, r24
 444:	20 8b       	std	Z+16, r18	; 0x10

}
 446:	00 00       	nop
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <poweramp_init>:


void poweramp_init(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
	//TURN ON THE POWER AMPLIFIER
	PORTC.OUTSET = poweramp_on;
 456:	80 e4       	ldi	r24, 0x40	; 64
 458:	96 e0       	ldi	r25, 0x06	; 6
 45a:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <poweramp_on>
 45e:	fc 01       	movw	r30, r24
 460:	25 83       	std	Z+5, r18	; 0x05
	PORTC.DIRSET = poweramp_on; 
 462:	80 e4       	ldi	r24, 0x40	; 64
 464:	96 e0       	ldi	r25, 0x06	; 6
 466:	20 91 00 22 	lds	r18, 0x2200	; 0x802200 <poweramp_on>
 46a:	fc 01       	movw	r30, r24
 46c:	21 83       	std	Z+1, r18	; 0x01
	
}
 46e:	00 00       	nop
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <usartd0_init>:
void usartd0_init(void)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
	//initialize transmitter and reciever pins
	PORTD.OUTSET = PIN3_bm;
 47e:	80 e6       	ldi	r24, 0x60	; 96
 480:	96 e0       	ldi	r25, 0x06	; 6
 482:	28 e0       	ldi	r18, 0x08	; 8
 484:	fc 01       	movw	r30, r24
 486:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 488:	80 e6       	ldi	r24, 0x60	; 96
 48a:	96 e0       	ldi	r25, 0x06	; 6
 48c:	28 e0       	ldi	r18, 0x08	; 8
 48e:	fc 01       	movw	r30, r24
 490:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 492:	80 e6       	ldi	r24, 0x60	; 96
 494:	96 e0       	ldi	r25, 0x06	; 6
 496:	24 e0       	ldi	r18, 0x04	; 4
 498:	fc 01       	movw	r30, r24
 49a:	22 83       	std	Z+2, r18	; 0x02

	//set baud rate
	USARTD0.BAUDCTRLA = (uint8_t)bsel;
 49c:	80 ea       	ldi	r24, 0xA0	; 160
 49e:	99 e0       	ldi	r25, 0x09	; 9
 4a0:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <bsel>
 4a4:	fc 01       	movw	r30, r24
 4a6:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((bscale << 4)|(bsel >> 4));
 4a8:	80 ea       	ldi	r24, 0xA0	; 160
 4aa:	99 e0       	ldi	r25, 0x09	; 9
 4ac:	20 91 02 22 	lds	r18, 0x2202	; 0x802202 <bscale>
 4b0:	02 2e       	mov	r0, r18
 4b2:	00 0c       	add	r0, r0
 4b4:	33 0b       	sbc	r19, r19
 4b6:	22 95       	swap	r18
 4b8:	32 95       	swap	r19
 4ba:	30 7f       	andi	r19, 0xF0	; 240
 4bc:	32 27       	eor	r19, r18
 4be:	20 7f       	andi	r18, 0xF0	; 240
 4c0:	32 27       	eor	r19, r18
 4c2:	32 2f       	mov	r19, r18
 4c4:	20 91 01 22 	lds	r18, 0x2201	; 0x802201 <bsel>
 4c8:	25 95       	asr	r18
 4ca:	25 95       	asr	r18
 4cc:	25 95       	asr	r18
 4ce:	25 95       	asr	r18
 4d0:	23 2b       	or	r18, r19
 4d2:	fc 01       	movw	r30, r24
 4d4:	27 83       	std	Z+7, r18	; 0x07

	//set to 8 bit odd parity with 1 stop bit
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_ODD_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 4d6:	80 ea       	ldi	r24, 0xA0	; 160
 4d8:	99 e0       	ldi	r25, 0x09	; 9
 4da:	23 e3       	ldi	r18, 0x33	; 51
 4dc:	fc 01       	movw	r30, r24
 4de:	25 83       	std	Z+5, r18	; 0x05

	//ENABLE TRANSMITTER AND RECIEVER
	USARTD0.CTRLB = USART_RXEN_bm;
 4e0:	80 ea       	ldi	r24, 0xA0	; 160
 4e2:	99 e0       	ldi	r25, 0x09	; 9
 4e4:	20 e1       	ldi	r18, 0x10	; 16
 4e6:	fc 01       	movw	r30, r24
 4e8:	24 83       	std	Z+4, r18	; 0x04
	
	//enable interrupts
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
 4ea:	80 ea       	ldi	r24, 0xA0	; 160
 4ec:	99 e0       	ldi	r25, 0x09	; 9
 4ee:	20 e2       	ldi	r18, 0x20	; 32
 4f0:	fc 01       	movw	r30, r24
 4f2:	23 83       	std	Z+3, r18	; 0x03
}
 4f4:	00 00       	nop
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <__vector_88>:
	O = 32
	P = 30
	
*/
ISR(USARTD0_RXC_vect)
{
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 50c:	0f 92       	push	r0
 50e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 512:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 516:	0f 92       	push	r0
 518:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 51c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 520:	0f 92       	push	r0
 522:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 526:	2f 93       	push	r18
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	1f 92       	push	r1
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
	char data = 'S';
 53a:	83 e5       	ldi	r24, 0x53	; 83
 53c:	89 83       	std	Y+1, r24	; 0x01
	//FOR DEBUGGING ONLY
	USARTD0.DATA = data;
 53e:	80 ea       	ldi	r24, 0xA0	; 160
 540:	99 e0       	ldi	r25, 0x09	; 9
 542:	29 81       	ldd	r18, Y+1	; 0x01
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18
	while(!(USARTD0.STATUS & USART_DREIF_bm))
 548:	00 00       	nop
 54a:	80 ea       	ldi	r24, 0xA0	; 160
 54c:	99 e0       	ldi	r25, 0x09	; 9
 54e:	fc 01       	movw	r30, r24
 550:	81 81       	ldd	r24, Z+1	; 0x01
 552:	88 2f       	mov	r24, r24
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	80 72       	andi	r24, 0x20	; 32
 558:	99 27       	eor	r25, r25
 55a:	89 2b       	or	r24, r25
 55c:	b1 f3       	breq	.-20     	; 0x54a <__vector_88+0x4e>
	{
		//do nothing
	}
	///////////////////
	if(data == 'S')
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	83 35       	cpi	r24, 0x53	; 83
 562:	a1 f4       	brne	.+40     	; 0x58c <__vector_88+0x90>
	{
		if(wave_type == 1)
 564:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	31 f4       	brne	.+12     	; 0x578 <__vector_88+0x7c>
		{
			//SWITCH TO SINE WAVE
			wave_type = 0;
 56c:	10 92 04 24 	sts	0x2404, r1	; 0x802404 <__data_end>
			switch_wave_flag = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	80 93 05 24 	sts	0x2405, r24	; 0x802405 <switch_wave_flag>
			wave_type = 1;
			switch_wave_flag = 1;
		}
	}
	
}
 576:	0a c0       	rjmp	.+20     	; 0x58c <__vector_88+0x90>
		{
			//SWITCH TO SINE WAVE
			wave_type = 0;
			switch_wave_flag = 1;
		}
		else if(wave_type == 0)
 578:	80 91 04 24 	lds	r24, 0x2404	; 0x802404 <__data_end>
 57c:	88 23       	and	r24, r24
 57e:	31 f4       	brne	.+12     	; 0x58c <__vector_88+0x90>
		{
			//SWITCH TO	TRIANGLE WAVE
			wave_type = 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 04 24 	sts	0x2404, r24	; 0x802404 <__data_end>
			switch_wave_flag = 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 05 24 	sts	0x2405, r24	; 0x802405 <switch_wave_flag>
		}
	}
	
}
 58c:	00 00       	nop
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 5a4:	0f 90       	pop	r0
 5a6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 5aa:	0f 90       	pop	r0
 5ac:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 5b0:	0f 90       	pop	r0
 5b2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <switch_waves>:

void switch_waves(uint8_t flag)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	1f 92       	push	r1
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	89 83       	std	Y+1, r24	; 0x01
	//switch to sine
	if(flag == 0)
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	88 23       	and	r24, r24
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <switch_waves+0x14>
 5ce:	6b c0       	rjmp	.+214    	; 0x6a6 <switch_waves+0xea>
	{
		//initialize DMA system
		DMA.CTRL = DMA_CH_DISABLE_bm;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
		DMA.CTRL = DMA_RESET_bm;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	20 e4       	ldi	r18, 0x40	; 64
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
		//set beginning of sinewave table as source address on ch0
		DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)sine_wave);
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	24 e0       	ldi	r18, 0x04	; 4
 5ec:	32 e2       	ldi	r19, 0x22	; 34
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)sine_wave)>>8);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	24 e0       	ldi	r18, 0x04	; 4
 5f8:	32 e2       	ldi	r19, 0x22	; 34
 5fa:	23 2f       	mov	r18, r19
 5fc:	33 27       	eor	r19, r19
 5fe:	fc 01       	movw	r30, r24
 600:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)sine_wave)>>16));
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	24 e0       	ldi	r18, 0x04	; 4
 608:	32 e2       	ldi	r19, 0x22	; 34
 60a:	40 e1       	ldi	r20, 0x10	; 16
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <switch_waves+0x58>
 610:	36 95       	lsr	r19
 612:	27 95       	ror	r18
 614:	4a 95       	dec	r20
 616:	e2 f7       	brpl	.-8      	; 0x610 <switch_waves+0x54>
 618:	fc 01       	movw	r30, r24
 61a:	22 8f       	std	Z+26, r18	; 0x1a
		//set daca ch1 register as destination address
		DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	2a e1       	ldi	r18, 0x1A	; 26
 622:	fc 01       	movw	r30, r24
 624:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	23 e0       	ldi	r18, 0x03	; 3
 62c:	fc 01       	movw	r30, r24
 62e:	25 8f       	std	Z+29, r18	; 0x1d
		DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	fc 01       	movw	r30, r24
 636:	16 8e       	std	Z+30, r1	; 0x1e
		//set block transfer size on ch0 to 512 bytes
		DMA.CH0.TRFCNT = 512;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	32 e0       	ldi	r19, 0x02	; 2
 640:	fc 01       	movw	r30, r24
 642:	24 8b       	std	Z+20, r18	; 0x14
 644:	35 8b       	std	Z+21, r19	; 0x15
		//set burst size to 2 bytes and turn on repeat mode
		DMA.CH0.CTRLA = (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm |DMA_CH_SINGLE_bm);
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	25 e2       	ldi	r18, 0x25	; 37
 64c:	fc 01       	movw	r30, r24
 64e:	20 8b       	std	Z+16, r18	; 0x10
		//enable single shot mode
		DMA.CH0.CTRLA |= DMA_CH_SINGLE_bm;
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	f9 01       	movw	r30, r18
 65a:	20 89       	ldd	r18, Z+16	; 0x10
 65c:	24 60       	ori	r18, 0x04	; 4
 65e:	fc 01       	movw	r30, r24
 660:	20 8b       	std	Z+16, r18	; 0x10
		//set dma ch0 to reload source address after block transfer and
		//destination address after burst transfer
		DMA.CH0.ADDRCTRL = (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	28 e4       	ldi	r18, 0x48	; 72
 668:	fc 01       	movw	r30, r24
 66a:	22 8b       	std	Z+18, r18	; 0x12
		//set dma to increment source and destination address after byte transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	31 e0       	ldi	r19, 0x01	; 1
 674:	f9 01       	movw	r30, r18
 676:	22 89       	ldd	r18, Z+18	; 0x12
 678:	21 61       	ori	r18, 0x11	; 17
 67a:	fc 01       	movw	r30, r24
 67c:	22 8b       	std	Z+18, r18	; 0x12
		//set dma ch0 as event channel 0 user
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	fc 01       	movw	r30, r24
 686:	23 8b       	std	Z+19, r18	; 0x13
		//enable dma ch0
		DMA.CTRL = DMA_ENABLE_bm;
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	20 e8       	ldi	r18, 0x80	; 128
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	31 e0       	ldi	r19, 0x01	; 1
 69a:	f9 01       	movw	r30, r18
 69c:	20 89       	ldd	r18, Z+16	; 0x10
 69e:	20 68       	ori	r18, 0x80	; 128
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 8b       	std	Z+16, r18	; 0x10
		//enable dma ch0
		DMA.CTRL = DMA_ENABLE_bm;
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
	} 
	
 6a4:	65 c0       	rjmp	.+202    	; 0x770 <switch_waves+0x1b4>
		//enable dma ch0
		DMA.CTRL = DMA_ENABLE_bm;
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
	}
	//switch to triangle
	else if(flag ==1)
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	09 f0       	breq	.+2      	; 0x6ae <switch_waves+0xf2>
 6ac:	61 c0       	rjmp	.+194    	; 0x770 <switch_waves+0x1b4>
	{
		//initialize DMA system
		DMA.CTRL = DMA_CH_DISABLE_bm;
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <DMA_CH_DISABLE_bm>
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
		DMA.CTRL = DMA_RESET_bm;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	20 e4       	ldi	r18, 0x40	; 64
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
		//set beginning of sinewave table as source address on ch0
		DMA.CH0.SRCADDR0 = (uint8_t)((uintptr_t)triangle_wave);
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e2       	ldi	r19, 0x20	; 32
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 8f       	std	Z+24, r18	; 0x18
		DMA.CH0.SRCADDR1 = (uint8_t)(((uintptr_t)triangle_wave)>>8);
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e2       	ldi	r19, 0x20	; 32
 6d8:	23 2f       	mov	r18, r19
 6da:	33 27       	eor	r19, r19
 6dc:	fc 01       	movw	r30, r24
 6de:	21 8f       	std	Z+25, r18	; 0x19
		DMA.CH0.SRCADDR2 = (uint8_t)((uint32_t)(((uintptr_t)triangle_wave)>>16));
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e2       	ldi	r19, 0x20	; 32
 6e8:	40 e1       	ldi	r20, 0x10	; 16
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <switch_waves+0x136>
 6ee:	36 95       	lsr	r19
 6f0:	27 95       	ror	r18
 6f2:	4a 95       	dec	r20
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <switch_waves+0x132>
 6f6:	fc 01       	movw	r30, r24
 6f8:	22 8f       	std	Z+26, r18	; 0x1a
		//set daca ch1 register as destination address
		DMA.CH0.DESTADDR0 = (uint8_t)((uintptr_t)&DACA.CH1DATA);
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	2a e1       	ldi	r18, 0x1A	; 26
 700:	fc 01       	movw	r30, r24
 702:	24 8f       	std	Z+28, r18	; 0x1c
		DMA.CH0.DESTADDR1 = (uint8_t)(((uintptr_t)&DACA.CH1DATA)>>8);
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	23 e0       	ldi	r18, 0x03	; 3
 70a:	fc 01       	movw	r30, r24
 70c:	25 8f       	std	Z+29, r18	; 0x1d
		DMA.CH0.DESTADDR2 = (uint8_t)((uint32_t)(((uintptr_t)&DACA.CH1DATA)>>16));
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	fc 01       	movw	r30, r24
 714:	16 8e       	std	Z+30, r1	; 0x1e
		//set block transfer size on ch0 to 512 bytes
		DMA.CH0.TRFCNT = 512;
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	32 e0       	ldi	r19, 0x02	; 2
 71e:	fc 01       	movw	r30, r24
 720:	24 8b       	std	Z+20, r18	; 0x14
 722:	35 8b       	std	Z+21, r19	; 0x15
		//set burst size to 2 bytes and turn on repeat mode
		DMA.CH0.CTRLA = (DMA_CH_BURSTLEN_2BYTE_gc |DMA_CH_REPEAT_bm |DMA_CH_SINGLE_bm);
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	25 e2       	ldi	r18, 0x25	; 37
 72a:	fc 01       	movw	r30, r24
 72c:	20 8b       	std	Z+16, r18	; 0x10
		//set dma ch0 to reload source address after block transfer and
		//destination address after burst transfer
		DMA.CH0.ADDRCTRL = (DMA_CH_SRCRELOAD_BLOCK_gc |  DMA_CH_DESTRELOAD_BURST_gc);
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	28 e4       	ldi	r18, 0x48	; 72
 734:	fc 01       	movw	r30, r24
 736:	22 8b       	std	Z+18, r18	; 0x12
		//set dma to increment source and destination address after byte transfer
		DMA.CH0.ADDRCTRL |= (DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTDIR_INC_gc);
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	31 e0       	ldi	r19, 0x01	; 1
 740:	f9 01       	movw	r30, r18
 742:	22 89       	ldd	r18, Z+18	; 0x12
 744:	21 61       	ori	r18, 0x11	; 17
 746:	fc 01       	movw	r30, r24
 748:	22 8b       	std	Z+18, r18	; 0x12
		//set dma ch0 as event channel 0 user
		DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	21 e0       	ldi	r18, 0x01	; 1
 750:	fc 01       	movw	r30, r24
 752:	23 8b       	std	Z+19, r18	; 0x13
		//enable dma ch0
		DMA.CTRL = DMA_ENABLE_bm;
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	20 e8       	ldi	r18, 0x80	; 128
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
		DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	31 e0       	ldi	r19, 0x01	; 1
 766:	f9 01       	movw	r30, r18
 768:	20 89       	ldd	r18, Z+16	; 0x10
 76a:	20 68       	ori	r18, 0x80	; 128
 76c:	fc 01       	movw	r30, r24
 76e:	20 8b       	std	Z+16, r18	; 0x10
	} 
	
 770:	00 00       	nop
 772:	0f 90       	pop	r0
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
